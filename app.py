import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.preprocessing import StandardScaler
import warnings

warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ü§ñ VK Bots vs Users Analysis",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π "Unknown"
@st.cache_data
def load_data():
    try:
        data = pd.read_csv('bots_vs_users.csv')

        # –ó–∞–º–µ–Ω—è–µ–º "Unknown" –Ω–∞ NaN
        data = data.replace('Unknown', np.nan)

        # –†–∞–∑–¥–µ–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
        numerical_cols = data.select_dtypes(include=['int64', 'float64']).columns
        categorical_cols = data.select_dtypes(include=['object']).columns

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏: —á–∏—Å–ª–æ–≤—ã–µ ‚Äî —Å—Ä–µ–¥–Ω–∏–º, –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ ‚Äî –º–æ–¥–æ–π
        for col in numerical_cols:
            data[col] = data[col].fillna(data[col].mean())
        for col in categorical_cols:
            data[col] = data[col].fillna(data[col].mode()[0])

        return data
    except FileNotFoundError:
        st.error("‚ùå –§–∞–π–ª 'bots_vs_users.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ.")
        return None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def preprocess_data(data):
    if data is None:
        return None, None, None

    numerical_features = []
    categorical_features = []

    for col in data.columns:
        if col != 'target':
            if data[col].dtype in ['int64', 'float64']:
                numerical_features.append(col)
            else:
                categorical_features.append(col)

    model_data = data.copy()

    for col in categorical_features:
        if model_data[col].dtype == 'object':
            model_data[col] = pd.get_dummies(model_data[col], prefix=col).iloc[:, 0]
        else:
            model_data[col] = model_data[col].astype(int)

    return data, numerical_features, categorical_features


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    st.markdown("## ü§ñ –ü–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ VK Bots vs Users")

    data = load_data()

    if data is None:
        st.stop()

    original_data, numerical_features, categorical_features = preprocess_data(data)

    if original_data is None:
        st.stop()

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ selectbox
    st.sidebar.markdown("## üéõÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è")

    analysis_section = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏–∑–∞:",
        [
            "üè† –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö",
            "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
            "üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
            "üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "üé® –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏",
            "üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        ]
    )

    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 2: Slider –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    st.sidebar.markdown("### üéöÔ∏è –§–∏–ª—å—Ç—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
    sample_size = st.sidebar.slider(
        "–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        min_value=100,
        max_value=len(original_data),
        value=min(1000, len(original_data)),
        step=100
    )

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    filtered_data = original_data.sample(n=sample_size, random_state=42)

    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç 3: Multiselect –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    if analysis_section in ["üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", "üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"]:
        selected_features = st.sidebar.multiselect(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            options=numerical_features[:20],
            default=numerical_features[:5] if len(numerical_features) >= 5 else numerical_features
        )

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    if analysis_section == "üè† –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":
        show_data_overview(filtered_data, numerical_features, categorical_features)

    elif analysis_section == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑":
        show_statistical_analysis(filtered_data, numerical_features)

    elif analysis_section == "üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤":
        if 'selected_features' in locals():
            show_feature_exploration(filtered_data, selected_features)
        else:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")

    elif analysis_section == "üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
        if 'selected_features' in locals():
            show_correlation_analysis(filtered_data, selected_features)
        else:
            st.error("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")

    elif analysis_section == "ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        show_ml_analysis(original_data, numerical_features)

    elif analysis_section == "üé® –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏":
        show_interactive_plots(filtered_data, numerical_features, categorical_features)

    elif analysis_section == "üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        show_detailed_info(filtered_data)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    st.sidebar.markdown("---")
    st.sidebar.markdown("### ‚ÑπÔ∏è –û –¥–∞—Ç–∞—Å–µ—Ç–µ")
    st.sidebar.info(
        """
        **VK Bots vs Users Dataset**

        üìä –î–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ VKontakte –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–æ—Ç–æ–≤.

        üéØ **–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è:**
        - 0: –†–µ–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        - 1: –ë–æ—Ç

        üìà **–†–∞–∑–º–µ—Ä:** 5,874 –∑–∞–ø–∏—Å–∏ √ó 60 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

        ‚öñÔ∏è **–ë–∞–ª–∞–Ω—Å:** 50/50 (—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        """
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
    if st.sidebar.button("üìã –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç", type="secondary"):
        with st.spinner("üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞..."):
            report = generate_report(original_data, numerical_features, categorical_features)

            st.sidebar.success("‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω!")

            st.markdown("---")
            st.markdown(report)

            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                data=report,
                file_name=f"vk_dataset_report_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.md",
                mime="text/markdown"
            )


def show_data_overview(data, numerical_features, categorical_features):
    st.markdown("### üìä –û–±–∑–æ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", f"{len(data):,}")

    with col2:
        st.metric("üî¢ –ß–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", len(numerical_features))

    with col3:
        st.metric("üìù –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", len(categorical_features))

    with col4:
        missing_pct = (data.isnull().sum().sum() / (len(data) * len(data.columns))) * 100
        st.metric("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π", f"{missing_pct:.1f}%")

    tab1, tab2, tab3 = st.tabs(["üìã –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏", "üìä –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"])

    with tab1:
        st.dataframe(data.head(10), use_container_width=True)

    with tab2:
        dtype_df = pd.DataFrame({
            '–ö–æ–ª–æ–Ω–∫–∞': data.columns,
            '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': data.dtypes.values,
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö': [data[col].nunique() for col in data.columns]
        })
        st.dataframe(dtype_df, use_container_width=True)

    with tab3:
        missing_data = data.isnull().sum()
        missing_data = missing_data[missing_data > 0].sort_values(ascending=False)

        if len(missing_data) > 0:
            st.markdown(
                "**–û–ø–∏—Å–∞–Ω–∏–µ:** –≠—Ç–æ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ.")
            fig = px.bar(
                x=missing_data.values,
                y=missing_data.index,
                orientation='h',
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º",
                labels={'x': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤', 'y': '–ü—Ä–∏–∑–Ω–∞–∫–∏'}
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.success("‚úÖ –í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π!")


def show_statistical_analysis(data, numerical_features):
    st.markdown("### üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑")

    selected_feature = st.selectbox(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        numerical_features
    )

    if selected_feature:
        col1, col2 = st.columns(2)

        with col1:
            st.markdown(
                "**–û–ø–∏—Å–∞–Ω–∏–µ:** –≠—Ç–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ.")
            fig = px.histogram(
                data,
                x=selected_feature,
                nbins=30,
                title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞: {selected_feature}",
                color_discrete_sequence=['#4267B2']
            )
            st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.markdown(
                "**–û–ø–∏—Å–∞–Ω–∏–µ:** –≠—Ç–∞ –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞–∑–º–∞—Ö–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞, –≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞–Ω—É, –∫–≤–∞—Ä—Ç–∏–ª–∏ –∏ –≤—ã–±—Ä–æ—Å—ã.")
            fig = px.box(
                data,
                y=selected_feature,
                title=f"–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞–∑–º–∞—Ö–∞ –¥–ª—è {selected_feature}",
                color_discrete_sequence=['#42A5F5']
            )
            st.plotly_chart(fig, use_container_width=True)

        st.subheader("üìä –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats = data[selected_feature].describe()

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–°—Ä–µ–¥–Ω–µ–µ", f"{stats['mean']:.2f}")
        with col2:
            st.metric("–ú–µ–¥–∏–∞–Ω–∞", f"{stats['50%']:.2f}")
        with col3:
            st.metric("–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{stats['std']:.2f}")
        with col4:
            st.metric("–†–∞–∑–º–∞—Ö", f"{stats['max'] - stats['min']:.2f}")


def show_feature_exploration(data, selected_features):
    st.markdown("### üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    if not selected_features:
        st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
        return

    viz_type = st.radio(
        "üìä –¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:",
        ["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º", "–ú–∞—Ç—Ä–∏—Ü–∞ –¥–∏–∞–≥—Ä–∞–º–º —Ä–∞—Å—Å–µ—è–Ω–∏—è"],
        horizontal=True
    )

    if viz_type == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è":
        cols = st.columns(2)
        for i, feature in enumerate(selected_features[:4]):
            with cols[i % 2]:
                st.markdown(
                    f"**–û–ø–∏—Å–∞–Ω–∏–µ:** –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–∞ {feature} –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ.")
                fig = px.histogram(
                    data,
                    x=feature,
                    title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞: {feature}",
                    nbins=30,
                    color_discrete_sequence=['#667eea']
                )
                st.plotly_chart(fig, use_container_width=True)

    elif viz_type == "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º":
        if 'target' in data.columns:
            cols = st.columns(2)
            for i, feature in enumerate(selected_features[:4]):
                with cols[i % 2]:
                    st.markdown(
                        f"**–û–ø–∏—Å–∞–Ω–∏–µ:** –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞–∑–º–∞—Ö–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ {feature} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (0) –∏ –±–æ—Ç–æ–≤ (1).")
                    fig = px.box(
                        data,
                        x='target',
                        y=feature,
                        title=f"{feature} –ø–æ –∫–ª–∞—Å—Å–∞–º",
                        color='target',
                        color_discrete_sequence=['#4ECDC4', '#FF6B6B']
                    )
                    fig.update_layout(xaxis=dict(tickvals=[0, 1], ticktext=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ë–æ—Ç']))
                    st.plotly_chart(fig, use_container_width=True)
        else:
            st.error("‚ùå –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    elif viz_type == "–ú–∞—Ç—Ä–∏—Ü–∞ –¥–∏–∞–≥—Ä–∞–º–º —Ä–∞—Å—Å–µ—è–Ω–∏—è":
        if len(selected_features) >= 2:
            features_for_matrix = selected_features[:4]
            st.markdown(
                "**–û–ø–∏—Å–∞–Ω–∏–µ:** –ú–∞—Ç—Ä–∏—Ü–∞ –¥–∏–∞–≥—Ä–∞–º–º —Ä–∞—Å—Å–µ—è–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞—Ä–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏.")
            fig = px.scatter_matrix(
                data[features_for_matrix].dropna(),
                title="–ú–∞—Ç—Ä–∏—Ü–∞ –¥–∏–∞–≥—Ä–∞–º–º —Ä–∞—Å—Å–µ—è–Ω–∏—è",
                height=600
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –ø—Ä–∏–∑–Ω–∞–∫–∞ –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã")


def show_correlation_analysis(data, selected_features):
    st.markdown("### üìä –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

    if not selected_features:
        st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
        return

    corr_data = data[selected_features].corr()

    show_values = st.checkbox("üìù –ü–æ–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏", value=True)
    st.markdown(
        "**–û–ø–∏—Å–∞–Ω–∏–µ:** –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏, –≥–¥–µ —Ü–≤–µ—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∏–ª—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ (—Å–∏–Ω–∏–π ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, –∫—Ä–∞—Å–Ω—ã–π ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è).")
    fig = px.imshow(
        corr_data,
        title="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
        color_continuous_scale='RdBu_r',
        aspect='auto',
        text_auto=show_values
    )
    fig.update_layout(height=500)
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("üîù –°–∏–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏")

    corr_pairs = []
    for i in range(len(corr_data.columns)):
        for j in range(i + 1, len(corr_data.columns)):
            feature1 = corr_data.columns[i]
            feature2 = corr_data.columns[j]
            correlation = corr_data.iloc[i, j]
            corr_pairs.append((feature1, feature2, correlation))

    corr_pairs.sort(key=lambda x: abs(x[2]), reverse=True)

    top_corr_df = pd.DataFrame(
        corr_pairs[:10],
        columns=['–ü—Ä–∏–∑–Ω–∞–∫ 1', '–ü—Ä–∏–∑–Ω–∞–∫ 2', '–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è']
    )
    top_corr_df['–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è'] = top_corr_df['–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è'].round(3)

    st.dataframe(top_corr_df, use_container_width=True)


def show_ml_analysis(data, numerical_features):
    st.markdown("### ü§ñ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")

    if 'target' not in data.columns:
        st.error("‚ùå –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è 'target' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    ml_features = [col for col in numerical_features if col in data.columns]
    if len(ml_features) == 0:
        st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
        return

    col1, col2 = st.columns(2)
    with col1:
        test_size = st.number_input("üéØ –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏", 0.1, 0.95, 0.2, 0.05)
    with col2:
        n_estimators = st.number_input("üå≥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤", 10, 200, 100, 10)

    if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary"):
        with st.spinner("‚è≥ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
            X = data[ml_features].fillna(0)
            y = data['target']

            X_train, X_test, y_train, y_test = train_test_split(
                X, y, test_size=test_size, random_state=42, stratify=y
            )

            scaler = StandardScaler()
            X_train_scaled = scaler.fit_transform(X_train)
            X_test_scaled = scaler.transform(X_test)

            model = RandomForestClassifier(
                n_estimators=n_estimators,
                random_state=42,
                n_jobs=-1
            )
            model.fit(X_train_scaled, y_train)

            y_pred = model.predict(X_test_scaled)

            st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")

            col1, col2 = st.columns(2)

            with col1:
                st.markdown(
                    "**–û–ø–∏—Å–∞–Ω–∏–µ:** –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –±–æ—Ç–æ–≤ (–∏—Å—Ç–∏–Ω–Ω—ã–µ vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã).")
                cm = confusion_matrix(y_test, y_pred)

                fig = px.imshow(
                    cm,
                    text_auto=True,
                    title="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫",
                    labels={'x': '–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å', 'y': '–ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å'},
                    color_continuous_scale='Blues'
                )
                fig.update_layout(
                    xaxis=dict(tickvals=[0, 1], ticktext=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ë–æ—Ç']),
                    yaxis=dict(tickvals=[0, 1], ticktext=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ë–æ—Ç'])
                )
                st.plotly_chart(fig, use_container_width=True)

            with col2:
                st.markdown(
                    "**–û–ø–∏—Å–∞–Ω–∏–µ:** –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —Ç–æ–ø-10 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏.")
                feature_importance = pd.DataFrame({
                    '–ü—Ä–∏–∑–Ω–∞–∫': ml_features,
                    '–í–∞–∂–Ω–æ—Å—Ç—å': model.feature_importances_
                }).sort_values('–í–∞–∂–Ω–æ—Å—Ç—å', ascending=False).head(10)

                fig = px.bar(
                    feature_importance,
                    x='–í–∞–∂–Ω–æ—Å—Ç—å',
                    y='–ü—Ä–∏–∑–Ω–∞–∫',
                    orientation='h',
                    title="–¢–æ–ø-10 –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
                    color='–í–∞–∂–Ω–æ—Å—Ç—å',
                    color_continuous_scale='Viridis'
                )
                st.plotly_chart(fig, use_container_width=True)

            accuracy = model.score(X_test_scaled, y_test)
            st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")

            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üéØ –¢–æ—á–Ω–æ—Å—Ç—å", f"{accuracy:.3f}")
            with col2:
                precision = cm[1, 1] / (cm[1, 1] + cm[0, 1]) if (cm[1, 1] + cm[0, 1]) > 0 else 0
                st.metric("üîç –¢–æ—á–Ω–æ—Å—Ç—å (Precision)", f"{precision:.3f}")
            with col3:
                recall = cm[1, 1] / (cm[1, 1] + cm[1, 0]) if (cm[1, 1] + cm[1, 0]) > 0 else 0
                st.metric("üìà –ü–æ–ª–Ω–æ—Ç–∞ (Recall)", f"{recall:.3f}")


def show_interactive_plots(data, numerical_features, categorical_features):
    st.markdown("### üé® –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")

    plot_type = st.selectbox(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
        ["–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "3D –¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–°–∫—Ä–∏–ø–∏—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–ö–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"]
    )

    if plot_type == "–¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
        col1, col2 = st.columns(2)
        with col1:
            x_feature = st.selectbox("–û—Å—å X:", numerical_features, key="scatter_x")
        with col2:
            y_feature = st.selectbox("–û—Å—å Y:", numerical_features, key="scatter_y",
                                     index=1 if len(numerical_features) > 1 else 0)

        color_by = st.selectbox("–¶–≤–µ—Ç –ø–æ:", ['target'] + categorical_features[:5], key="scatter_color")
        st.markdown(
            f"**–û–ø–∏—Å–∞–Ω–∏–µ:** –¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É {x_feature} –∏ {y_feature}, —Å —Ü–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç {color_by}.")
        fig = px.scatter(
            data.dropna(subset=[x_feature, y_feature]),
            x=x_feature,
            y=y_feature,
            color=color_by,
            title=f"{x_feature} –ø—Ä–æ—Ç–∏–≤ {y_feature}",
            opacity=0.6,
            hover_data=[col for col in data.columns[:5]]
        )
        st.plotly_chart(fig, use_container_width=True)

    elif plot_type == "3D –¢–æ—á–µ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
        if len(numerical_features) >= 3:
            col1, col2, col3 = st.columns(3)
            with col1:
                x_feature = st.selectbox("–û—Å—å X:", numerical_features, key="3d_x")
            with col2:
                y_feature = st.selectbox("–û—Å—å Y:", numerical_features, key="3d_y", index=1)
            with col3:
                z_feature = st.selectbox("–û—Å—å Z:", numerical_features, key="3d_z", index=2)

            color_by = st.selectbox("–¶–≤–µ—Ç –ø–æ:", ['target'] + categorical_features[:5], key="3d_color")
            st.markdown(
                f"**–û–ø–∏—Å–∞–Ω–∏–µ:** 3D –≥—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å –º–µ–∂–¥—É {x_feature}, {y_feature} –∏ {z_feature}, —Å —Ü–≤–µ—Ç–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç {color_by}.")
            fig = px.scatter_3d(
                data.dropna(subset=[x_feature, y_feature, z_feature]),
                x=x_feature,
                y=y_feature,
                z=z_feature,
                color=color_by,
                title=f"3D: {x_feature} –ø—Ä–æ—Ç–∏–≤ {y_feature} –ø—Ä–æ—Ç–∏–≤ {z_feature}",
                opacity=0.6
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è 3D –≥—Ä–∞—Ñ–∏–∫–∞")

    elif plot_type == "–°–∫—Ä–∏–ø–∏—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        feature = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫:", numerical_features, key="violin_feature")
        st.markdown(
            f"**–û–ø–∏—Å–∞–Ω–∏–µ:** –°–∫—Ä–∏–ø–∏—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ {feature} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (0) –∏ –±–æ—Ç–æ–≤ (1), –≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞–Ω—É –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å.")
        if 'target' in data.columns:
            fig = px.violin(
                data,
                y=feature,
                x='target',
                box=True,
                title=f"–°–∫—Ä–∏–ø–∏—á–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: {feature}",
                color='target',
                color_discrete_sequence=['#4ECDC4', '#FF6B6B']
            )
            fig.update_layout(
                xaxis=dict(tickvals=[0, 1], ticktext=['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–ë–æ—Ç'])
            )
            st.plotly_chart(fig, use_container_width=True)

    elif plot_type == "–ö–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
        if len(categorical_features) >= 2:
            cat1 = st.selectbox("–ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å:", categorical_features, key="sun_1")
            cat2 = st.selectbox("–í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å:", categorical_features, key="sun_2", index=1)
            st.markdown(
                f"**–û–ø–∏—Å–∞–Ω–∏–µ:** –ö–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {cat1} –∏ {cat2}.")
            sunburst_data = data[[cat1, cat2, 'target']].dropna()

            fig = px.sunburst(
                sunburst_data,
                path=[cat1, cat2],
                values='target',
                title=f"–ö–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: {cat1} -> {cat2}"
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–æ–ª—å—Ü–µ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã")

def show_detailed_info(data):
    st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

    st.subheader("üîç –ü–æ–∏—Å–∫ –≤ –¥–∞–Ω–Ω—ã—Ö")

    if 'target' in data.columns:
        target_filter = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É:",
            ["–í—Å–µ", "–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (0)", "–¢–æ–ª—å–∫–æ –±–æ—Ç—ã (1)"]
        )

        if target_filter == "–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (0)":
            filtered_data = data[data['target'] == 0]
        elif target_filter == "–¢–æ–ª—å–∫–æ –±–æ—Ç—ã (1)":
            filtered_data = data[data['target'] == 1]
        else:
            filtered_data = data
    else:
        filtered_data = data

    search_term = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–æ–ª–æ–Ω–∫–∞–º:")

    if search_term:
        mask = pd.Series([False] * len(filtered_data))
        for col in filtered_data.columns:
            if filtered_data[col].dtype == 'object':
                mask |= filtered_data[col].astype(str).str.contains(search_term, case=False, na=False)

        if mask.any():
            filtered_data = filtered_data[mask]
            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_data)} –∑–∞–ø–∏—Å–µ–π")
        else:
            st.warning("‚ö†Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(filtered_data)} –∏–∑ {len(data)}")

    page_size = st.selectbox("üìÑ –ó–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:", [10, 25, 50, 100], index=1)

    total_pages = (len(filtered_data) - 1) // page_size + 1

    if total_pages > 1:
        page = st.number_input(
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ (1-{total_pages}):",
            min_value=1,
            max_value=total_pages,
            value=1
        )

        start_idx = (page - 1) * page_size
        end_idx = start_idx + page_size

        display_data = filtered_data.iloc[start_idx:end_idx]
    else:
        display_data = filtered_data

    st.dataframe(display_data, use_container_width=True, height=400)

    if len(display_data) > 0:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º")

        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("üìù –ó–∞–ø–∏—Å–µ–π", len(filtered_data))

        with col2:
            if 'target' in filtered_data.columns:
                bot_ratio = (filtered_data['target'] == 1).mean() * 100
                st.metric("ü§ñ % –±–æ—Ç–æ–≤", f"{bot_ratio:.1f}%")

        with col3:
            missing_ratio = (filtered_data.isnull().sum().sum() / (
                    len(filtered_data) * len(filtered_data.columns))) * 100
            st.metric("‚ùå % –ø—Ä–æ–ø—É—Å–∫–æ–≤", f"{missing_ratio:.1f}%")

    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")

    if st.button("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV)"):
        csv = filtered_data.to_csv(index=False)
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=f"filtered_data_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )


def create_dataset_summary(data):
    summary = {
        'total_records': len(data),
        'total_features': len(data.columns),
        'missing_values': data.isnull().sum().sum(),
        'memory_usage': data.memory_usage(deep=True).sum() / 1024 ** 2,
        'numeric_features': len(data.select_dtypes(include=[np.number]).columns),
        'categorical_features': len(data.select_dtypes(include=['object']).columns)
    }

    if 'target' in data.columns:
        summary['class_balance'] = data['target'].value_counts().to_dict()

    return summary


def detect_outliers(data, feature, method='IQR'):
    if method == 'IQR':
        Q1 = data[feature].quantile(0.25)
        Q3 = data[feature].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR

        outliers = data[(data[feature] < lower_bound) | (data[feature] > upper_bound)]
        return outliers

    elif method == 'Z-score':
        z_scores = np.abs((data[feature] - data[feature].mean()) / data[feature].std())
        outliers = data[z_scores > 3]
        return outliers

    return pd.DataFrame()


def generate_report(data, numerical_features, categorical_features):
    report = []

    report.append("# üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –¥–∞—Ç–∞—Å–µ—Ç—É VK Bots vs Users")
    report.append(f"**üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞:** {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}")
    report.append("")

    report.append("## üîç –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")
    report.append(f"- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:** {len(data):,}")
    report.append(f"- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:** {len(data.columns)}")
    report.append(f"- **–ß–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:** {len(numerical_features)}")
    report.append(f"- **–ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:** {len(categorical_features)}")
    report.append("")

    missing_total = data.isnull().sum().sum()
    report.append("## üìã –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
    report.append(f"- **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤:** {missing_total:,}")
    report.append(f"- **–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤:** {(missing_total / (len(data) * len(data.columns)) * 100):.2f}%")

    if missing_total > 0:
        top_missing = data.isnull().sum().sort_values(ascending=False).head(5)
        report.append("- **–¢–æ–ø-5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏:**")
        for col, count in top_missing.items():
            if count > 0:
                report.append(f"  - {col}: {count:,} ({count / len(data) * 100:.1f}%)")

    report.append("")

    if 'target' in data.columns:
        report.append("## üéØ –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
        target_counts = data['target'].value_counts()
        report.append(f"- **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (0):** {target_counts.get(0, 0):,}")
        report.append(f"- **–ë–æ—Ç—ã (1):** {target_counts.get(1, 0):,}")

        if len(target_counts) == 2:
            balance_ratio = min(target_counts.values) / max(target_counts.values)
            report.append(f"- **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –±–∞–ª–∞–Ω—Å–∞:** {balance_ratio:.3f}")

        report.append("")

    report.append("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

    if missing_total > len(data) * len(data.columns) * 0.1:
        report.append("- ‚ö†Ô∏è **–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤** - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    if 'target' in data.columns and len(data['target'].value_counts()) == 2:
        balance_ratio = min(data['target'].value_counts().values) / max(data['target'].value_counts().values)
        if balance_ratio < 0.8:
            report.append("- ‚öñÔ∏è **–î–∏—Å–±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤** - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ—Ç–æ–¥—ã –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

    if len(numerical_features) > 20:
        report.append("- üîç **–ú–Ω–æ–≥–æ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤** - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –º–µ—Ç–æ–¥—ã –æ—Ç–±–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    report.append("- üìä **–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑** –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≤–∑–∞–∏–º–æ—Å–≤—è–∑–µ–π –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
    report.append("- ü§ñ **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è** –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    return "\n".join(report)


if __name__ == "__main__":
    main()